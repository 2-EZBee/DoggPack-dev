metadata:
  name: "doggpack-connectivity-mapping"
  version: "1.0.0"
  created_date: "2025-08-03"
  created_by: "CDTZ"
  status: "draft"
  purpose: "Comprehensive mapping of ports, domains, networking, and connectivity for DoggPack services"

description:
  overview: "Complete connectivity blueprint for DoggPack ecosystem including Docker networking, port allocations, domain mappings, and external access"
  scope: "All DoggPack services, MCP servers, external integrations, development environments, and supporting infrastructure"
  business_value: "Prevent port conflicts, optimize networking, ensure scalable architecture, enable predictable deployments"

# ==========================================
# NETWORK FOUNDATION ARCHITECTURE
# ==========================================

network_architecture:
  physical_infrastructure:
    nucdogg:
      ip: "192.168.10.50"
      role: "Docker Swarm Manager, MCP Hub, Infrastructure Coordinator"
      os: "Ubuntu 22.04"
      docker_role: "manager"
      
    workdogg:
      ip: "192.168.10.51"
      role: "Docker Swarm Worker, Development Workloads, Processing"
      os: "Ubuntu 22.04"
      docker_role: "worker"
      
    zendogg:
      ip: "192.168.10.52"
      role: "Windows Control Interface, Primary Workstation"
      os: "Windows 11 Pro"
      docker_role: "client"
      
    nasdogg:
      ip: "192.168.10.40"
      role: "Storage, Local DNS, Network Services"
      os: "Synology DSM"
      docker_role: "none"

  vlan_structure:
    infrastructure: "192.168.10.0/24"  # DoggPack core
    smarthome: "192.168.20.0/24"       # IoT isolation
    gaming: "192.168.30.0/24"          # Entertainment
    personal: "192.168.40.0/24"        # Personal devices

# ==========================================
# DOCKER NETWORKING STRATEGY
# ==========================================

docker_networking:
  swarm_networks:
    coordination_net:
      driver: "overlay"
      subnet: "10.1.0.0/24"
      purpose: "MCP servers and core coordination"
      attachable: true
      encrypted: true
      
    services_net:
      driver: "overlay"  
      subnet: "10.2.0.0/24"
      purpose: "Application services (N8N, monitoring, etc.)"
      attachable: true
      encrypted: false
      
    development_net:
      driver: "overlay"
      subnet: "10.3.0.0/24"
      purpose: "Isolated development environments"
      attachable: true
      encrypted: false
      
    api_gateway_net:
      driver: "overlay"
      subnet: "10.4.0.0/24"
      purpose: "External API proxy and ingress"
      attachable: true
      encrypted: true

  bridge_networks:
    isolated_dev_net:
      driver: "bridge"
      subnet: "172.20.0.0/24"
      purpose: "Local development containers"
      
    monitoring_net:
      driver: "bridge"
      subnet: "172.21.0.0/24"
      purpose: "Local monitoring and logging"

# ==========================================
# PORT ALLOCATION STRATEGY
# ==========================================

port_allocation:
  # Host port ranges for different service types
  port_ranges:
    mcp_servers: "8100-8199"          # MCP protocol servers
    web_interfaces: "8200-8299"       # Web UIs and dashboards
    api_services: "8300-8399"         # REST APIs and webhooks
    development: "8400-8499"          # Development tools and IDEs
    monitoring: "8500-8599"           # Monitoring and metrics
    databases: "8600-8699"            # Database services
    messaging: "8700-8799"            # Message queues and communication
    external_access: "3000-3099"      # External-facing services
    ssh_rdp: "2200-2299"             # SSH and RDP tunnels
    vpn_wireguard: "51820-51830"     # VPN services

  reserved_system_ports:
    - "22"     # SSH (host)
    - "80"     # HTTP (potential future use)
    - "443"    # HTTPS (potential future use)
    - "53"     # DNS (NasDogg)
    - "1194"   # OpenVPN (router)
    - "3389"   # RDP (Windows hosts)
    - "2376"   # Docker API (secured)
    - "2377"   # Docker Swarm (management)
    - "7946"   # Docker Swarm (nodes)
    - "4789"   # Docker overlay networks

# ==========================================
# FOUNDATION SERVICES MAPPING
# ==========================================

foundation_services:
  planning_coordinator:
    container_name: "planning-coordinator"
    image: "doggpack/planning-coordinator:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8100
    container_port: 8080
    docker_network: "coordination_net"
    container_ip: "10.1.0.10"
    purpose: "Central MCP coordination and deployment state"
    external_access: false
    domains:
      internal: "mcp.doggpack.local"
      external: "mcp.doggpack.net"
    health_check: "http://192.168.10.50:8100/health"
    
  api_gateway:
    container_name: "api-gateway"
    image: "doggpack/api-gateway:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8200
    container_port: 8080
    docker_network: "api_gateway_net"
    container_ip: "10.4.0.10"
    purpose: "External API proxy and rate limiting"
    external_access: true
    external_port: 3001
    domains:
      internal: "api.doggpack.local"
      external: "api.doggpack.net"
    health_check: "http://192.168.10.50:8200/health"
    
  system_monitoring:
    container_name: "system-monitoring"
    image: "doggpack/system-monitoring:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8500
    container_port: 8080
    docker_network: "coordination_net"
    container_ip: "10.1.0.20"
    purpose: "System metrics and Docker monitoring"
    external_access: false
    domains:
      internal: "monitoring.doggpack.local"
    health_check: "http://192.168.10.50:8500/health"

  docker_management:
    container_name: "docker-management"
    image: "doggpack/docker-management:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8101
    container_port: 8080
    docker_network: "coordination_net"
    container_ip: "10.1.0.30"
    purpose: "Docker Swarm management via MCP"
    external_access: false
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    health_check: "http://192.168.10.50:8101/health"

# ==========================================
# DEVELOPMENT ENVIRONMENTS
# ==========================================

development_environments:
  claude_dev_ccn:
    container_name: "claude-dev-ccn"
    image: "doggpack/claude-dev:latest"
    host_ip: "192.168.10.50"  # NucDogg
    ssh_port: 2200
    vnc_port: 5900
    docker_network: "development_net"
    container_ip: "10.3.0.10"
    purpose: "CCN isolated development environment"
    volumes:
      - "ccn_workspace:/workspace"
      - "ccn_shared_state:/shared_state"
      - "/var/run/docker.sock:/var/run/docker.sock"
      
  claude_dev_ccw:
    container_name: "claude-dev-ccw"
    image: "doggpack/claude-dev:latest"
    host_ip: "192.168.10.51"  # WorkDogg
    ssh_port: 2201
    vnc_port: 5901
    docker_network: "development_net"
    container_ip: "10.3.0.20"
    purpose: "CCW isolated development environment"
    volumes:
      - "ccw_workspace:/workspace"
      - "ccw_shared_state:/shared_state"
      - "/var/run/docker.sock:/var/run/docker.sock"

# ==========================================
# APPLICATION SERVICES
# ==========================================

application_services:
  n8n_automation:
    container_name: "n8n-automation"
    image: "n8nio/n8n:latest"
    host_ip: "192.168.10.51"  # WorkDogg
    host_port: 8300
    container_port: 5678
    docker_network: "services_net"
    container_ip: "10.2.0.10"
    purpose: "Workflow automation and integration"
    external_access: true
    external_port: 3002
    domains:
      internal: "n8n.doggpack.local"
      external: "automation.doggpack.net"
    volumes:
      - "n8n_data:/home/node/.n8n"
    environment:
      - "N8N_HOST=0.0.0.0"
      - "N8N_PORT=5678"
      - "WEBHOOK_URL=https://automation.doggpack.net"
      
  obsidian_livesync:
    container_name: "obsidian-livesync"
    image: "couchdb:3.3"
    host_ip: "192.168.10.40"  # NasDogg (Synology)
    host_port: 8601
    container_port: 5984
    docker_network: "services_net"
    container_ip: "10.2.0.20"
    purpose: "Obsidian LiveSync database"
    external_access: true
    external_port: 3003
    domains:
      internal: "obsidian.doggpack.local"
      external: "sync.doggpack.net"
    volumes:
      - "obsidian_data:/opt/couchdb/data"
      
  portainer:
    container_name: "portainer"
    image: "portainer/portainer-ce:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8201
    container_port: 9000
    docker_network: "coordination_net"
    container_ip: "10.1.0.40"
    purpose: "Docker Swarm management interface"
    external_access: true
    external_port: 3004
    domains:
      internal: "portainer.doggpack.local"
      external: "docker.doggpack.net"
    volumes:
      - "portainer_data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"

# ==========================================
# MONITORING AND OBSERVABILITY
# ==========================================

monitoring_stack:
  prometheus:
    container_name: "prometheus"
    image: "prom/prometheus:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8501
    container_port: 9090
    docker_network: "coordination_net"
    container_ip: "10.1.0.50"
    purpose: "Metrics collection and alerting"
    volumes:
      - "prometheus_data:/prometheus"
      - "prometheus_config:/etc/prometheus"
      
  grafana:
    container_name: "grafana"
    image: "grafana/grafana:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8202
    container_port: 3000
    docker_network: "coordination_net"
    container_ip: "10.1.0.60"
    purpose: "Metrics visualization and dashboards"
    external_access: true
    external_port: 3005
    domains:
      internal: "grafana.doggpack.local"
      external: "metrics.doggpack.net"
    volumes:
      - "grafana_data:/var/lib/grafana"
      
  loki:
    container_name: "loki"
    image: "grafana/loki:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8502
    container_port: 3100
    docker_network: "coordination_net"
    container_ip: "10.1.0.70"
    purpose: "Log aggregation and analysis"
    volumes:
      - "loki_data:/loki"

# ==========================================
# EXTERNAL INTEGRATIONS
# ==========================================

external_integrations:
  asana_proxy:
    container_name: "asana-proxy"
    image: "doggpack/api-proxy:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8301
    container_port: 8080
    docker_network: "api_gateway_net"
    container_ip: "10.4.0.20"
    purpose: "Asana API proxy with rate limiting"
    environment:
      - "TARGET_API=https://app.asana.com/api/1.0"
      - "RATE_LIMIT=100/hour"
      
  github_proxy:
    container_name: "github-proxy"
    image: "doggpack/api-proxy:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8302
    container_port: 8080
    docker_network: "api_gateway_net"
    container_ip: "10.4.0.30"
    purpose: "GitHub API proxy with authentication"
    environment:
      - "TARGET_API=https://api.github.com"
      - "RATE_LIMIT=1000/hour"
      
  google_workspace_proxy:
    container_name: "google-workspace-proxy"
    image: "doggpack/api-proxy:latest"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8303
    container_port: 8080
    docker_network: "api_gateway_net"
    container_ip: "10.4.0.40"
    purpose: "Google Workspace API proxy"
    environment:
      - "TARGET_API=https://www.googleapis.com"

# ==========================================
# DOMAIN MAPPING STRATEGY
# ==========================================

domain_mapping:
  internal_domains:
    base_domain: "doggpack.local"
    dns_server: "192.168.10.40"  # NasDogg
    records:
      # Infrastructure hosts
      - name: "nasdogg"
        type: "A"
        value: "192.168.10.40"
      - name: "nucdogg" 
        type: "A"
        value: "192.168.10.50"
      - name: "workdogg"
        type: "A"
        value: "192.168.10.51"
      - name: "zendogg"
        type: "A"
        value: "192.168.10.52"
        
      # Service endpoints
      - name: "mcp"
        type: "CNAME"
        value: "nucdogg.doggpack.local"
      - name: "api"
        type: "CNAME"
        value: "nucdogg.doggpack.local"
      - name: "monitoring"
        type: "CNAME"
        value: "nucdogg.doggpack.local"
      - name: "n8n"
        type: "CNAME"
        value: "workdogg.doggpack.local"
      - name: "obsidian"
        type: "CNAME"
        value: "nasdogg.doggpack.local"
      - name: "portainer"
        type: "CNAME"
        value: "nucdogg.doggpack.local"
      - name: "grafana"
        type: "CNAME"
        value: "nucdogg.doggpack.local"
        
  external_domains:
    base_domain: "doggpack.net"
    dns_provider: "cloudflare"
    records:
      # Infrastructure access
      - name: "home"
        type: "A"
        value: "dynamic_ip"
        proxied: true
      - name: "vpn"
        type: "A"
        value: "dynamic_ip"
        proxied: false
        
      # Service access
      - name: "mcp"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true
      - name: "api"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true
      - name: "automation"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true
      - name: "sync"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true
      - name: "docker"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true
      - name: "metrics"
        type: "CNAME"
        value: "home.doggpack.net"
        proxied: true

# ==========================================
# PORT FORWARDING CONFIGURATION
# ==========================================

port_forwarding:
  # Router port forwarding rules
  external_access:
    # VPN and Remote Access
    - external_port: 1194
      protocol: "UDP"
      internal_ip: "192.168.10.1"  # Router VPN server
      internal_port: 1194
      description: "OpenVPN server"
      
    # Emergency RDP Access
    - external_port: 3390
      protocol: "TCP"
      internal_ip: "192.168.10.50"  # NucDogg
      internal_port: 3389
      description: "NucDogg RDP (emergency)"
      
    - external_port: 3391
      protocol: "TCP" 
      internal_ip: "192.168.10.51"  # WorkDogg
      internal_port: 3389
      description: "WorkDogg RDP (emergency)"
      
    - external_port: 3392
      protocol: "TCP"
      internal_ip: "192.168.10.52"  # ZenDogg
      internal_port: 3389
      description: "ZenDogg RDP (emergency)"
      
    # SSH Access
    - external_port: 2222
      protocol: "TCP"
      internal_ip: "192.168.10.50"  # NucDogg
      internal_port: 22
      description: "NucDogg SSH"
      
    - external_port: 2223
      protocol: "TCP"
      internal_ip: "192.168.10.51"  # WorkDogg  
      internal_port: 22
      description: "WorkDogg SSH"
      
    # Web Services (via reverse proxy)
    - external_port: 3001
      protocol: "TCP"
      internal_ip: "192.168.10.50"  # API Gateway
      internal_port: 8200
      description: "API Gateway"
      
    - external_port: 3002
      protocol: "TCP"
      internal_ip: "192.168.10.51"  # N8N
      internal_port: 8300
      description: "N8N Automation"
      
    - external_port: 3003
      protocol: "TCP"
      internal_ip: "192.168.10.40"  # Obsidian
      internal_port: 8601
      description: "Obsidian LiveSync"
      
    - external_port: 3004
      protocol: "TCP"
      internal_ip: "192.168.10.50"  # Portainer
      internal_port: 8201
      description: "Portainer"
      
    - external_port: 3005
      protocol: "TCP"
      internal_ip: "192.168.10.50"  # Grafana
      internal_port: 8202
      description: "Grafana Metrics"

# ==========================================
# LOAD BALANCING AND SCALING
# ==========================================

load_balancing:
  traefik_ingress:
    container_name: "traefik"
    image: "traefik:v3.0"
    host_ip: "192.168.10.50"  # NucDogg
    host_port: 8080  # Dashboard
    http_port: 80
    https_port: 443
    docker_network: "api_gateway_net"
    container_ip: "10.4.0.100"
    purpose: "Reverse proxy and load balancer"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "traefik_config:/etc/traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.doggpack.local`)"
      
  scaling_targets:
    # Services that can scale horizontally
    api_gateway:
      min_replicas: 1
      max_replicas: 3
      scaling_metric: "cpu_utilization"
      threshold: 70
      
    system_monitoring:
      min_replicas: 1
      max_replicas: 2
      scaling_metric: "memory_utilization"
      threshold: 80

# ==========================================
# SECURITY CONSIDERATIONS
# ==========================================

security_configuration:
  network_policies:
    # Container-to-container access rules
    coordination_net:
      - "planning_coordinator can access docker_management"
      - "system_monitoring can access all containers"
      - "api_gateway isolated from coordination_net"
      
    api_gateway_net:
      - "External traffic only to api_gateway"
      - "api_gateway can proxy to internal services"
      - "Rate limiting on all external endpoints"
      
  ssl_certificates:
    # Let's Encrypt certificates via Traefik
    domains:
      - "*.doggpack.net"
      - "doggpack.net"
    renewal: "automatic"
    storage: "traefik_acme:/acme"
    
  firewall_rules:
    # Additional iptables rules for container isolation
    docker_isolation:
      - "DENY inter-container communication except via overlay networks"
      - "ALLOW monitoring container to access all containers"
      - "LOG all denied connection attempts"

# ==========================================
# BACKUP AND DISASTER RECOVERY
# ==========================================

backup_strategy:
  docker_volumes:
    backup_schedule: "daily_2am"
    retention: "30_days"
    destination: "nasdogg:/docker_backups/"
    volumes:
      - "prometheus_data"
      - "grafana_data"
      - "portainer_data"
      - "n8n_data"
      - "obsidian_data"
      - "ccn_workspace"
      - "ccw_workspace"
      
  configuration_backup:
    docker_compose_files: "git_repository"
    ssl_certificates: "nasdogg:/ssl_backups/"
    traefik_config: "nasdogg:/traefik_backups/"
    
  disaster_recovery:
    rebuild_priority:
      1: "Docker Swarm initialization"
      2: "Core MCP services"
      3: "Monitoring and logging"
      4: "Application services"
      5: "Development environments"

# ==========================================
# VALIDATION AND TESTING
# ==========================================

validation_procedures:
  connectivity_tests:
    internal_dns:
      - "nslookup mcp.doggpack.local"
      - "nslookup nucdogg.doggpack.local"
      - "ping nasdogg.doggpack.local"
      
    container_networking:
      - "docker exec planning-coordinator ping api-gateway"
      - "docker network ls | grep coordination_net"
      - "docker service ls | grep running"
      
    external_access:
      - "curl https://api.doggpack.net/health"
      - "curl https://automation.doggpack.net"
      - "nslookup vpn.doggpack.net from external network"
      
  port_conflict_detection:
    # Automated port scanning to detect conflicts
    scan_commands:
      - "nmap -sS 192.168.10.50 -p 8000-8999"
      - "netstat -tulpn | grep LISTEN"
      - "docker ps --format 'table {{.Names}}\t{{.Ports}}'"
      
  performance_validation:
    load_testing:
      - "ab -n 1000 -c 10 http://api.doggpack.local:8200/"
      - "docker stats --no-stream"
      - "curl http://monitoring.doggpack.local:8500/metrics"

# ==========================================
# DEPLOYMENT SEQUENCE
# ==========================================

deployment_sequence:
  phase_1_foundation:
    order: 1
    services:
      - "docker_swarm_init"
      - "network_creation"
      - "planning_coordinator"
      - "docker_management"
      
  phase_2_monitoring:
    order: 2
    services:
      - "system_monitoring"
      - "prometheus"
      - "loki"
      
  phase_3_gateway:
    order: 3
    services:
      - "traefik"
      - "api_gateway"
      - "external_proxies"
      
  phase_4_applications:
    order: 4
    services:
      - "n8n_automation"
      - "obsidian_livesync"
      - "portainer"
      
  phase_5_development:
    order: 5
    services:
      - "claude_dev_ccn"
      - "claude_dev_ccw"
      - "grafana"
      
  phase_6_optimization:
    order: 6
    services:
      - "ssl_certificate_setup"
      - "monitoring_alerts"
      - "backup_configuration"

# ==========================================
# TROUBLESHOOTING REFERENCE
# ==========================================

troubleshooting:
  common_issues:
    port_conflicts:
      symptoms: "Service fails to start, 'port already in use' error"
      diagnosis: "netstat -tulpn | grep <port>"
      resolution: "Check port allocation table, reassign if needed"
      
    dns_resolution:
      symptoms: "Cannot resolve *.doggpack.local domains"
      diagnosis: "nslookup <domain> 192.168.10.40"
      resolution: "Check NasDogg DNS server configuration"
      
    container_networking:
      symptoms: "Container cannot communicate with others"
      diagnosis: "docker network inspect <network_name>"
      resolution: "Verify containers on same network, check firewall"
      
    external_access:
      symptoms: "Cannot access services from internet"
      diagnosis: "Check port forwarding and Cloudflare settings"
      resolution: "Verify router NAT rules and DNS propagation"
      
  diagnostic_commands:
    network_status:
      - "docker network ls"
      - "docker service ls"
      - "docker node ls"
      - "ip route show"
      
    service_health:
      - "docker service ps <service_name>"
      - "docker logs <container_name>"
      - "curl http://<service>/health"
      
    connectivity:
      - "ping <hostname>"
      - "telnet <host> <port>"
      - "nmap -sS <target>"

# Success metrics for deployment validation
success_criteria:
  network_connectivity:
    - "All internal domains resolve correctly"
    - "Docker overlay networks operational"
    - "Inter-container communication working"
    
  service_availability:
    - "All services respond to health checks"
    - "External access working via VPN"
    - "Load balancing functional"
    
  security_validation:
    - "No unexpected open ports"
    - "SSL certificates valid"
    - "Network isolation enforced"
    
  performance_targets:
    - "Service response times < 500ms"
    - "Container startup time < 30s"
    - "Resource utilization < 70%"